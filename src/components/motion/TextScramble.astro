---
interface Props {
    text: string;
    // Optional: Define a class for styling the scrambled characters
    scrambleCharsClass?: string;
    // Optional: Define a class for styling the final text
    finalTextClass?: string;
}

const {
    text,
    scrambleCharsClass = "text-green-500",
    finalTextClass = "text-white",
} = Astro.props;
---

<div
    class="scramble-container"
    data-text={text}
    data-scramble-class={scrambleCharsClass}
    data-final-class={finalTextClass}
>
    <!-- The text will be rendered here by the script -->
</div>

<script>
    class TextScramble {
        el: HTMLElement;
        chars: string;
        private resolve: (value?: unknown) => void;
        private queue: Array<{
            from: string;
            to: string;
            start: number;
            end: number;
            char?: string;
        }>;
        private frameRequest?: number;
        private frame: number;

        constructor(el: HTMLElement) {
            this.el = el;
            this.chars = "!<>-_\\/[]{}â€”=+*^?#________";
            this.update = this.update.bind(this);
            this.resolve = () => {};
            this.queue = [];
            this.frame = 0;
        }

        setText(newText: string) {
            const oldText = this.el.innerText;
            const length = Math.max(oldText.length, newText.length);
            const promise = new Promise((resolve) => (this.resolve = resolve));
            this.queue = [];
            for (let i = 0; i < length; i++) {
                const from = oldText[i] || "";
                const to = newText[i] || "";
                const start = Math.floor(Math.random() * 60); // Increased randomness for start
                const end = start + Math.floor(Math.random() * 60) + 20; // Ensure a minimum duration and more randomness
                this.queue.push({ from, to, start, end });
            }
            if (this.frameRequest) {
                cancelAnimationFrame(this.frameRequest);
            }
            this.frame = 0;
            this.update();
            return promise;
        }

        update() {
            let output = "";
            let complete = 0;
            const scrambleClass = this.el.dataset.scrambleClass || "";
            const finalClass = this.el.dataset.finalClass || "";

            for (let i = 0, n = this.queue.length; i < n; i++) {
                let { from, to, start, end, char } = this.queue[i];
                if (this.frame >= end) {
                    complete++;
                    output += `<span class="${finalClass}">${to}</span>`;
                } else if (this.frame >= start) {
                    if (!char || Math.random() < 0.28) {
                        // Chance to change char
                        char = this.randomChar();
                        this.queue[i].char = char;
                    }
                    output += `<span class="${scrambleClass}">${char}</span>`;
                } else {
                    output += `<span class="${finalClass}">${from}</span>`;
                }
            }
            this.el.innerHTML = output;
            if (complete === this.queue.length) {
                this.resolve();
            } else {
                this.frameRequest = requestAnimationFrame(this.update);
                this.frame++;
            }
        }
        randomChar() {
            return this.chars[Math.floor(Math.random() * this.chars.length)];
        }
    }

    // Function to initialize all scramble containers
    function initializeScrambleEffects() {
        document
            .querySelectorAll(".scramble-container")
            .forEach((container) => {
                const el = container as HTMLElement;
                const text = el.dataset.text;
                if (text) {
                    // Clear any existing content first
                    el.innerHTML = "";
                    const fx = new TextScramble(el);
                    // Small delay to ensure styles are applied
                    setTimeout(() => {
                        fx.setText(text);
                    }, 100);
                }
            });
    }

    // Initialize on first load
    initializeScrambleEffects();

    // Re-initialize when navigating back to the page with View Transitions
    document.addEventListener("astro:after-swap", () => {
        initializeScrambleEffects();
    });

    // Also handle browser back/forward navigation
    window.addEventListener("pageshow", (event) => {
        // persisted is true when page is loaded from cache (back/forward navigation)
        if (event.persisted) {
            initializeScrambleEffects();
        }
    });
</script>

<style is:global>
    /* Ensures inline display for the spans if needed, and proper alignment */
    .scramble-container span {
        display: inline-block; /* Or inline, depending on desired layout */
    }

    /* Ensure the scramble container is positioned above the border */
    .scramble-container {
        position: relative;
        z-index: 30;
        display: inline-block;
    }
</style>
