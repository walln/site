---
interface Props {
    onComplete?: () => void;
}
---

<div id="boot-sequence" class="terminal-content font-mono text-sm">
    <!-- ASCII Logo (initially hidden) -->
    <pre
        id="ascii-logo"
        class="text-center text-accent-green opacity-0 text-xs mb-4 leading-none">
╔═══════════════════════════════╗
║                               ║
║    ███╗   ██╗██╗    ██╗      ║
║    ████╗  ██║██║    ██║      ║
║    ██╔██╗ ██║██║ █╗ ██║      ║
║    ██║╚██╗██║██║███╗██║      ║
║    ██║ ╚████║╚███╔███╔╝      ║
║    ╚═╝  ╚═══╝ ╚══╝╚══╝       ║
║                               ║
║    SYSTEM BOOT v1.0.0         ║
╚═══════════════════════════════╝
    </pre>

    <!-- Boot messages -->
    <div class="boot-messages space-y-1 text-xs text-quote">
        <div class="boot-line">System initializing...</div>
        <div class="boot-line">Loading kernel modules...</div>
        <div class="boot-line">Starting services...</div>
        <div class="boot-line">Mounting filesystems...</div>
        <div class="boot-line">Starting network interfaces...</div>
        <div class="boot-line">Loading user profile...</div>
    </div>

    <!-- Command sequence container -->
    <div class="command-sequence mt-4 space-y-3">
        <!-- Commands will be injected here -->
    </div>

    <!-- Cursor -->
    <span class="terminal-cursor animate-pulse opacity-0">█</span>
</div>

<style>
    #ascii-logo {
        font-family: "Courier New", Courier, monospace;
        line-height: 1;
        white-space: pre;
        letter-spacing: 0;
    }

    .boot-line {
        opacity: 0;
        transform: translateY(10px);
    }

    .command-line {
        opacity: 0;
    }

    .output-line {
        opacity: 0;
        transform: translateX(-10px);
    }

    .terminal-cursor {
        @apply text-quote;
    }

    .social-links {
        @apply flex gap-4 text-xs;
    }

    .social-links a {
        @apply text-accent hover:text-accent-2 transition-colors;
    }

    @keyframes typewriter {
        from {
            width: 0;
        }
        to {
            width: 100%;
        }
    }

    .typing-effect {
        overflow: hidden;
        white-space: nowrap;
        animation: typewriter 0.5s steps(40) forwards;
    }

    .boot-progress {
        @apply text-accent-green text-xs;
    }

    @keyframes glitch {
        0% {
            transform: translate(0);
            filter: hue-rotate(0deg);
        }
        20% {
            transform: translate(-2px, 2px);
            filter: hue-rotate(90deg);
        }
        40% {
            transform: translate(-2px, -2px);
            filter: hue-rotate(180deg);
        }
        60% {
            transform: translate(2px, 2px);
            filter: hue-rotate(270deg);
        }
        80% {
            transform: translate(2px, -2px);
            filter: hue-rotate(360deg);
        }
        100% {
            transform: translate(0);
            filter: hue-rotate(0deg);
        }
    }

    .glitch-effect {
        animation: glitch 0.3s linear;
    }
</style>

<script>
    // Check if user has visited before
    function hasVisitedBefore() {
        return localStorage.getItem("hasSeenBoot") === "true";
    }

    function setVisited() {
        localStorage.setItem("hasSeenBoot", "true");
    }

    // Reset boot for debugging
    function resetBoot() {
        localStorage.removeItem("hasSeenBoot");
        window.location.reload();
    }

    // Boot sequence animation
    async function runBootSequence() {
        const container = document.getElementById("boot-sequence");
        if (!container) return;

        const asciiLogo = document.getElementById("ascii-logo");
        const bootMessages = container.querySelectorAll(".boot-line");
        const commandContainer = container.querySelector(".command-sequence");
        const cursor = container.querySelector(".terminal-cursor");

        // Determine if fast boot
        const fastBoot = hasVisitedBefore();
        const animDelay = fastBoot ? 50 : 150;
        const typeDelay = fastBoot ? 10 : 30;

        // Show ASCII logo with glitch effect
        if (asciiLogo) {
            // Always show logo for at least a moment, even in fast boot
            asciiLogo.style.opacity = "1";
            asciiLogo.style.transition = "opacity 0.5s ease-in";

            if (!fastBoot) {
                // Full glitch effect for first-time visitors
                await new Promise((resolve) => setTimeout(resolve, 300));

                // Add glitch effect
                for (let i = 0; i < 3; i++) {
                    await new Promise((resolve) => setTimeout(resolve, 200));
                    asciiLogo.style.transform = `translateX(${Math.random() * 4 - 2}px)`;
                    asciiLogo.style.filter = `hue-rotate(${Math.random() * 360}deg)`;
                    await new Promise((resolve) => setTimeout(resolve, 50));
                    asciiLogo.style.transform = "translateX(0)";
                    asciiLogo.style.filter = "hue-rotate(0deg)";
                }

                await new Promise((resolve) => setTimeout(resolve, 800));
            } else {
                // Quick flash for returning visitors
                await new Promise((resolve) => setTimeout(resolve, 300));
            }

            // Fade out logo
            asciiLogo.style.opacity = "0";
            await new Promise((resolve) => setTimeout(resolve, 300));
            asciiLogo.style.display = "none";
        }

        // Animate boot messages
        for (let i = 0; i < bootMessages.length; i++) {
            const msg = bootMessages[i] as HTMLElement;
            await new Promise((resolve) => {
                setTimeout(() => {
                    msg.style.opacity = "1";
                    msg.style.transform = "translateY(0)";
                    msg.style.transition = "all 0.3s ease-out";

                    // Add [OK] status
                    const okSpan = document.createElement("span");
                    okSpan.className = "boot-progress float-right";
                    okSpan.textContent = "[ OK ]";
                    okSpan.style.opacity = "0";
                    msg.appendChild(okSpan);

                    setTimeout(() => {
                        okSpan.style.opacity = "1";
                        okSpan.style.transition = "opacity 0.2s ease-in";
                    }, 100);

                    resolve(null);
                }, i * animDelay);
            });
        }

        // Wait a bit before starting commands
        await new Promise((resolve) => setTimeout(resolve, 800));

        // Clear boot messages with fade
        bootMessages.forEach((msg) => {
            (msg as HTMLElement).style.opacity = "0";
            (msg as HTMLElement).style.transition = "opacity 0.5s ease-out";
        });

        await new Promise((resolve) => setTimeout(resolve, 500));
        container.querySelector(".boot-messages")?.remove();

        // Show cursor
        if (cursor) {
            (cursor as HTMLElement).style.opacity = "1";
        }

        // Get command data from element
        const bootCommands = [
            {
                cmd: "$ whoami",
                output: [
                    "Nick Wall",
                    "",
                    "Research Engineer • Member of Technical Staff",
                ],
                delay: 500,
            },
            {
                cmd: "$ current --status",
                output: ["Leading Engineering & Research @ Maple"],
                delay: 300,
            },
            {
                cmd: "$ history --employers",
                output: [
                    "[0] Independent Research",
                    "[1] IBM",
                    "[2] Southern Methodist University",
                ],
                delay: 300,
            },
            {
                cmd: "$ social --links",
                output: [],
                customOutput: () => {
                    const socialDiv = document.createElement("div");
                    socialDiv.className = "social-links mt-2";
                    socialDiv.innerHTML = `
                        <span class="text-quote">Find me on:</span>
                        <a href="https://github.com/walln" target="_blank">Github</a>
                        <a href="https://twitter.com/nickwal" target="_blank">Twitter</a>
                        <a href="https://www.linkedin.com/in/nicholasewall" target="_blank">LinkedIn</a>
                        <a href="mailto:walln@hey.com">Email</a>
                    `;
                    return socialDiv;
                },
                delay: 300,
                isFinal: true,
            },
        ];

        // Type each command
        for (const command of bootCommands) {
            if (!commandContainer || !cursor) break;

            // Create command element
            const cmdDiv = document.createElement("div");
            cmdDiv.className = "command-group";

            const cmdLine = document.createElement("div");
            cmdLine.className = "command-line text-accent-green";
            cmdLine.innerHTML = "";

            cmdDiv.appendChild(cmdLine);
            commandContainer.appendChild(cmdDiv);

            // Move cursor to end of new command
            cmdLine.appendChild(cursor);

            // Type the command character by character
            for (let i = 0; i < command.cmd.length; i++) {
                cmdLine.innerHTML =
                    command.cmd.substring(0, i + 1) +
                    '<span class="terminal-cursor animate-pulse">█</span>';
                await new Promise((resolve) =>
                    setTimeout(resolve, typeDelay + Math.random() * 20),
                );
            }

            // Press enter (remove cursor temporarily)
            cmdLine.innerHTML = command.cmd;
            await new Promise((resolve) => setTimeout(resolve, 100));

            // Show output
            if (command.customOutput) {
                const outputDiv = command.customOutput();
                cmdDiv.appendChild(outputDiv);

                // Animate custom output
                outputDiv.style.opacity = "0";
                outputDiv.style.transform = "translateX(-10px)";
                await new Promise((resolve) => {
                    setTimeout(() => {
                        outputDiv.style.opacity = "1";
                        outputDiv.style.transform = "translateX(0)";
                        outputDiv.style.transition = "all 0.3s ease-out";
                        resolve(null);
                    }, 50);
                });
            } else if (command.output.length > 0) {
                const outputDiv = document.createElement("div");
                outputDiv.className = "output pl-4 mt-1";

                for (const line of command.output) {
                    const outputLine = document.createElement("div");
                    outputLine.className = "output-line";
                    outputLine.style.opacity = "0";
                    outputLine.style.transform = "translateX(-10px)";

                    if (line.startsWith("[")) {
                        outputLine.innerHTML = `<span class="text-quote">${line.substring(0, 3)}</span>${line.substring(3)}`;
                    } else if (line === "") {
                        outputLine.innerHTML = "&nbsp;";
                    } else if (
                        line === "Software Engineer • System Architect"
                    ) {
                        outputLine.className += " text-xs text-quote uppercase";
                        outputLine.textContent = line;
                    } else {
                        outputLine.textContent = line;
                    }

                    outputDiv.appendChild(outputLine);

                    // Animate output line
                    await new Promise((resolve) => {
                        setTimeout(() => {
                            outputLine.style.opacity = "1";
                            outputLine.style.transform = "translateX(0)";
                            outputLine.style.transition = "all 0.2s ease-out";
                            resolve(null);
                        }, 50);
                    });
                }

                cmdDiv.appendChild(outputDiv);
            }

            // Add spacing
            const spacer = document.createElement("div");
            spacer.className = "mt-3";
            spacer.appendChild(cursor);
            commandContainer.appendChild(spacer);

            // Wait before next command
            await new Promise((resolve) => setTimeout(resolve, command.delay));

            // If this is the final command, trigger completion
            if (command.isFinal) {
                // Mark as visited
                setVisited();

                // Remove cursor from spacer since it will be added in the main script
                spacer.removeChild(cursor);

                // Dispatch completion event without fading out
                window.dispatchEvent(new CustomEvent("bootComplete"));
            }
        }
    }

    // Flag to track if boot sequence has run in this session
    let bootSequenceRun = false;

    // Function to show final terminal state immediately
    function showFinalState() {
        const container = document.getElementById("boot-sequence");
        if (!container) return;

        const commandContainer = container.querySelector(".command-sequence");
        if (!commandContainer) return;

        // Hide boot messages and logo immediately
        const bootMessages = container.querySelector(".boot-messages");
        if (bootMessages) (bootMessages as HTMLElement).style.display = "none";

        const asciiLogo = document.getElementById("ascii-logo");
        if (asciiLogo) asciiLogo.style.display = "none";

        // Remove any existing cursors to prevent duplicates
        const existingCursors = container.querySelectorAll(".terminal-cursor");
        existingCursors.forEach((cursor) => cursor.remove());

        // Clear and rebuild command sequence
        commandContainer.innerHTML = "";

        // Add all commands immediately
        const bootCommands = [
            {
                cmd: "$ whoami",
                output: [
                    "Nick Wall",
                    "",
                    "Software Engineer • System Architect",
                ],
            },
            {
                cmd: "$ current --status",
                output: ["Building @ Maple"],
            },
            {
                cmd: "$ history --employers",
                output: [
                    "[0] Independent Research",
                    "[1] IBM",
                    "[2] Southern Methodist University",
                ],
            },
            {
                cmd: "$ social --links",
                output: [],
                customOutput: () => {
                    const socialDiv = document.createElement("div");
                    socialDiv.className = "social-links mt-2";
                    socialDiv.innerHTML = `
                        <span class="text-quote">Find me on:</span>
                        <a href="https://github.com/walln" target="_blank">Github</a>
                        <a href="https://twitter.com/nickwal" target="_blank">Twitter</a>
                        <a href="https://www.linkedin.com/in/nicholasewall" target="_blank">LinkedIn</a>
                        <a href="mailto:walln@hey.com">Email</a>
                    `;
                    return socialDiv;
                },
            },
        ];

        // Build the final state
        bootCommands.forEach((command, index) => {
            const cmdDiv = document.createElement("div");
            cmdDiv.className = "command-group";

            const cmdLine = document.createElement("div");
            cmdLine.className = "command-line text-accent-green";
            cmdLine.textContent = command.cmd;
            cmdDiv.appendChild(cmdLine);

            if (command.customOutput) {
                const outputDiv = command.customOutput();
                cmdDiv.appendChild(outputDiv);
            } else if (command.output.length > 0) {
                const outputDiv = document.createElement("div");
                outputDiv.className = "output pl-4 mt-1";

                command.output.forEach((line) => {
                    const outputLine = document.createElement("div");
                    outputLine.className = "output-line";

                    if (line.startsWith("[")) {
                        outputLine.innerHTML = `<span class="text-quote">${line.substring(0, 3)}</span>${line.substring(3)}`;
                    } else if (line === "") {
                        outputLine.innerHTML = "&nbsp;";
                    } else if (
                        line === "Software Engineer • System Architect"
                    ) {
                        outputLine.className += " text-xs text-quote uppercase";
                        outputLine.textContent = line;
                    } else {
                        outputLine.textContent = line;
                    }

                    outputDiv.appendChild(outputLine);
                });

                cmdDiv.appendChild(outputDiv);
            }

            commandContainer.appendChild(cmdDiv);

            // Add spacing between commands (but not after the last one)
            if (index < bootCommands.length - 1) {
                const spacer = document.createElement("div");
                spacer.className = "mt-3";
                commandContainer.appendChild(spacer);
            }
        });

        // Add a final spacer where the cursor will go
        const finalSpacer = document.createElement("div");
        finalSpacer.className = "mt-3";
        commandContainer.appendChild(finalSpacer);

        // Dispatch completion event
        window.dispatchEvent(new CustomEvent("bootComplete"));
    }

    // Start boot sequence on load
    document.addEventListener("DOMContentLoaded", () => {
        setTimeout(() => {
            runBootSequence();
            bootSequenceRun = true;
        }, 500);

        // Add keyboard shortcut to reset boot
        document.addEventListener("keydown", (e) => {
            // Ctrl/Cmd + Shift + R to reset boot
            if ((e.ctrlKey || e.metaKey) && e.shiftKey && e.key === "R") {
                e.preventDefault();
                resetBoot();
            }
        });
    });

    // Handle view transitions - show final state if boot has already run
    document.addEventListener("astro:after-swap", () => {
        if (!bootSequenceRun) {
            setTimeout(() => {
                runBootSequence();
                bootSequenceRun = true;
            }, 500);
        } else {
            // Boot has already run in this session, show final state immediately
            showFinalState();
        }
    });
</script>
