---
import Pagefind from "@/components/Pagefind.astro";
import { menuLinks } from "@/site.config";

// import Search from "@/components/Search.astro";

const url = new URL(Astro.request.url);
---

<header
	class="relative mb-12 mt-20 section-terminal group z-30"
	id="main-header"
>
	<div class="flex items-center justify-between">
		<div class="flex items-center gap-4">
			<a
				aria-current={url.pathname === "/" ? "page" : false}
				class="text-xl font-bold uppercase tracking-wider hover:text-accent transition-colors"
				href="/"
			>
				<span class="text-accent-green">$</span> NICK_WALL
			</a>
			<span class="text-quote hidden sm:inline">|</span>
			<nav
				aria-label="Main menu"
				class="hidden sm:flex items-center gap-2 text-xs"
				id="navigation-menu"
			>
				{
					menuLinks.map((link, index) => (
						<>
							{index > 0 && <span class="text-quote">/</span>}
							<a
								aria-current={
									url.pathname === link.path ? "page" : false
								}
								class={`uppercase tracking-wider transition-colors hover:underline ${
									url.pathname === link.path
										? "text-accent-green"
										: "text-quote hover:text-white"
								}`}
								data-astro-prefetch
								href={link.path}
							>
								{link.title}
							</a>
						</>
					))
				}
			</nav>
		</div>
		<div class="flex items-center gap-2">
			<Pagefind />
			<!-- Mobile menu toggle -->
			<button
				aria-expanded="false"
				aria-label="Open main menu"
				class="sm:hidden p-2 border border-quote text-quote hover:text-accent-green hover:border-accent-green transition-all"
				id="toggle-navigation-menu"
				type="button"
			>
				<svg
					aria-hidden="true"
					class="h-5 w-5"
					fill="none"
					focusable="false"
					stroke="currentColor"
					stroke-linecap="round"
					stroke-linejoin="round"
					stroke-width="2"
					viewBox="0 0 24 24"
					xmlns="http://www.w3.org/2000/svg"
				>
					<path d="M4 6h16M4 12h16M4 18h16"></path>
				</svg>
			</button>
		</div>
	</div>

	<!-- Mobile navigation -->
	<nav
		aria-label="Mobile menu"
		class="absolute top-full left-0 right-0 mt-2 hidden bg-black border border-quote p-4 group-[.menu-open]:block sm:hidden z-50"
		id="mobile-navigation-menu"
	>
		{
			menuLinks.map((link) => (
				<a
					aria-current={url.pathname === link.path ? "page" : false}
					class={`block py-2 uppercase text-xs tracking-wider border-b border-dotted border-quote last:border-0 ${
						url.pathname === link.path
							? "text-accent-green"
							: "text-quote hover:text-white"
					}`}
					data-astro-prefetch
					href={link.path}
				>
					<span class="mr-2">â–¶</span>
					{link.title}
				</a>
			))
		}
	</nav>
</header>

<script>
	// Keep a reference to the document click handler so it can be removed.
	let headerMenuDocumentClickHandler: ((event: MouseEvent) => void) | null =
		null;

	function setupHeaderMobileMenu() {
		const toggleButton = document.getElementById(
			"toggle-navigation-menu",
		) as HTMLButtonElement | null;
		const header = document.getElementById(
			"main-header",
		) as HTMLElement | null;
		// We don't strictly need mobileNav for the toggle, but good to ensure it exists for context
		const mobileNav = document.getElementById(
			"mobile-navigation-menu",
		) as HTMLElement | null;

		if (!toggleButton || !header || !mobileNav) {
			// console.warn("Header mobile menu: key elements not found. Menu may not work as expected.");
			return;
		}

		// Use .onclick for the toggle button to ensure only one handler is active
		toggleButton.onclick = () => {
			const isOpen = header.classList.contains("menu-open");
			header.classList.toggle("menu-open");
			toggleButton.setAttribute("aria-expanded", String(!isOpen));
		};

		// Remove the previous document click handler if it exists
		if (headerMenuDocumentClickHandler) {
			document.removeEventListener(
				"click",
				headerMenuDocumentClickHandler,
			);
			headerMenuDocumentClickHandler = null; // Clear the stored handler reference
		}

		headerMenuDocumentClickHandler = (e: MouseEvent) => {
			// If the click was on the toggle button itself, let its .onclick handler manage it.
			// The .onclick has already fired by this point for a click on the button.
			if (toggleButton.contains(e.target as Node)) {
				return;
			}

			// Only proceed if the menu is actually open
			if (header.classList.contains("menu-open")) {
				// If the click is outside the main header element (which contains the mobile nav panel),
				// then close the menu.
				if (!header.contains(e.target as Node)) {
					header.classList.remove("menu-open");
					toggleButton.setAttribute("aria-expanded", "false");
				}
			}
		};
		document.addEventListener("click", headerMenuDocumentClickHandler);
	}

	// Initial setup: Ensure DOM is ready
	if (document.readyState === "loading") {
		document.addEventListener("DOMContentLoaded", setupHeaderMobileMenu);
	} else {
		setupHeaderMobileMenu(); // DOM is already loaded
	}

	// Re-setup after Astro view transitions for client-side navigation
	document.addEventListener("astro:page-load", setupHeaderMobileMenu);
</script>
