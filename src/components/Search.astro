---
// Heavy inspiration taken from Astro Starlight -> https://github.com/withastro/starlight/blob/main/packages/starlight/components/Search.astro

import "@pagefind/default-ui/css/ui.css";
---

<site-search class="ms-auto" id="search">
	<button
		class="flex h-9 w-9 items-center justify-center ring-white transition-all hover:ring-1"
		data-open-modal
		disabled
	>
		<svg
			aria-label="search"
			class="h-7 w-7"
			fill="none"
			height="16"
			stroke="currentColor"
			stroke-linecap="round"
			stroke-linejoin="round"
			stroke-width="1.5"
			viewBox="0 0 24 24"
			width="16"
			xmlns="http://www.w3.org/2000/svg"
		>
			<path d="M0 0h24v24H0z" stroke="none"></path>
			<path d="M3 10a7 7 0 1 0 14 0 7 7 0 1 0-14 0M21 21l-6-6"></path>
		</svg>
	</button>
	<dialog
		aria-label="search"
		class="h-full max-h-full w-full max-w-full bg-black backdrop:bg-black backdrop:bg-opacity-90 backdrop:backdrop-blur-lg sm:mx-auto sm:mb-auto sm:mt-16 sm:h-max sm:max-h-[calc(100%-8rem)] sm:min-h-[15rem] sm:w-5/6 sm:max-w-[48rem]"
	>
		<div
			class="dialog-frame bg-black bg-opacity-95 border-2 border-double border-quote p-6 h-full shadow-2xl"
			style="background-image: radial-gradient(circle at 1px 1px, rgba(136, 136, 136, 0.1) 0.5px, transparent 0); background-size: 10px 10px;"
		>
			<div class="flex items-center justify-between mb-4">
				<h2
					class="text-accent-2 uppercase text-sm tracking-wider font-bold"
				>
					Search Database
				</h2>
				<button
					class="text-quote hover:text-white transition-colors uppercase text-xs border border-quote px-3 py-1 hover:border-white"
					data-close-modal
				>
					[ESC] Close
				</button>
			</div>
			{
				false ? (
					<div class="mx-auto text-center">
						<p class="text-quote">
							Search is only available in production builds.{" "}
							<br />
							Try building and previewing the site to test it out
							locally.
						</p>
					</div>
				) : (
					<div class="search-container">
						<div id="walln__search" />
					</div>
				)
			}
		</div>
	</dialog>
</site-search>

<script>
	class SiteSearch extends HTMLElement {
		private closeBtn: HTMLButtonElement;
		private dialog: HTMLDialogElement;
		private dialogFrame: HTMLDivElement;
		private openBtn: HTMLButtonElement;

		closeModal = () => {
			if (this.dialog.open) {
				this.dialog.close();
				window.removeEventListener("click", this.onWindowClick);
			}
		};

		onWindowClick = (event: MouseEvent) => {
			// check if it's a link
			const isLink = "href" in (event.target || {});
			// make sure the click is either a link or outside of the dialog
			if (
				isLink ||
				(document.body.contains(event.target as Node) &&
					!this.dialogFrame.contains(event.target as Node))
			)
				this.closeModal();
		};

		onWindowKeydown = (e: KeyboardEvent) => {
			// check if it's the / key
			if (e.key === "/" && !this.dialog.open) {
				this.openModal();
				e.preventDefault();
			}
		};

		openModal = (event?: MouseEvent) => {
			this.dialog.showModal();
			this.querySelector("input")?.focus();
			event?.stopPropagation();
			window.addEventListener("click", this.onWindowClick);
		};

		constructor() {
			super();
			this.openBtn = this.querySelector<HTMLButtonElement>(
				"button[data-open-modal]",
			)!;
			this.closeBtn = this.querySelector<HTMLButtonElement>(
				"button[data-close-modal]",
			)!;
			this.dialog = this.querySelector("dialog")!;
			this.dialogFrame = this.querySelector(".dialog-frame")!;

			this.openBtn.addEventListener("click", this.openModal);
			this.openBtn.disabled = false;
			this.closeBtn.addEventListener("click", this.closeModal);
		}

		connectedCallback() {
			// Listen for keyboard shortcut
			window.addEventListener("keydown", this.onWindowKeydown);

			// only add pagefind in production
			if (import.meta.env.DEV) return;
			const onIdle =
				window.requestIdleCallback || ((cb) => setTimeout(cb, 1));
			onIdle(async () => {
				const { PagefindUI } = await import("@pagefind/default-ui");
				new PagefindUI({
					baseUrl: import.meta.env.BASE_URL,
					bundlePath:
						import.meta.env.BASE_URL.replace(/\/$/, "") +
						"/pagefind/",
					element: "#walln__search",
					showImages: false,
					showSubResults: true,
				});
			});
		}

		disconnectedCallback() {
			window.removeEventListener("keydown", this.onWindowKeydown);
		}
	}

	customElements.define("site-search", SiteSearch);
</script>

<style is:global>
	:root {
		--pagefind-ui-font: "Geist Mono", monospace;
	}

	#walln__search .pagefind-ui__search-input {
		border: none !important;
		border-bottom: 1px solid #888888 !important;
		background: transparent !important;
		color: white !important;
		font-family: "Geist Mono", monospace !important;
		font-size: 0.875rem !important;
		padding: 0.5rem 0 !important;
	}

	#walln__search .pagefind-ui__search-input:focus {
		outline: none !important;
	}

	#walln__search .pagefind-ui__search-input::placeholder {
		color: #888888 !important;
		text-transform: uppercase !important;
		font-size: 0.75rem !important;
		letter-spacing: 0.05em !important;
	}

	#walln__search .pagefind-ui__search-clear {
		width: calc(60px * var(--pagefind-ui-scale));
		padding: 0;
		background-color: transparent;
		overflow: hidden;
	}
	#walln__search .pagefind-ui__search-clear:focus {
		outline: 1px solid theme("colors.quote");
	}
	#walln__search .pagefind-ui__search-clear::before {
		content: "";
		-webkit-mask: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' fill='none' viewBox='0 0 24 24' stroke-width='1.5' stroke='currentColor' %3E%3Cpath stroke-linecap='round' stroke-linejoin='round' d='M6 18L18 6M6 6l12 12'%3E%3C/path%3E%3C/svg%3E")
			center / 60% no-repeat;
		mask: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' fill='none' viewBox='0 0 24 24' stroke-width='1.5' stroke='currentColor' %3E%3Cpath stroke-linecap='round' stroke-linejoin='round' d='M6 18L18 6M6 6l12 12'%3E%3C/path%3E%3C/svg%3E")
			center / 60% no-repeat;
		background-color: theme("colors.quote");
		display: block;
		width: 100%;
		height: 100%;
	}

	#walln__search .pagefind-ui__result {
		border: 0;
		padding: 0.75rem;
		margin: 0.25rem 0;
		border: 1px solid transparent;
		transition: all 0.15s;
	}

	#walln__search .pagefind-ui__result:hover {
		background-color: rgba(255, 255, 255, 0.03);
		border-color: rgba(136, 136, 136, 0.5);
		border-style: dashed;
	}

	#walln__search .pagefind-ui__result-link {
		background: none;
		color: theme("colors.accent-2");
		font-family: "Geist Mono", monospace;
		text-transform: uppercase;
		font-size: 0.875rem;
		letter-spacing: 0.05em;
	}

	#walln__search .pagefind-ui__result-link:hover {
		text-decoration: none;
		color: white;
		background: none;
	}

	#walln__search .pagefind-ui__result-excerpt {
		color: theme("colors.quote");
		font-size: 0.75rem;
		font-family: "Geist Mono", monospace;
		margin-top: 0.25rem;
	}

	#walln__search mark {
		color: rgba(57, 255, 20, 0.8);
		background-color: transparent;
		font-weight: 600;
	}

	#walln__search .pagefind-ui__message {
		color: theme("colors.quote");
		font-family: "Geist Mono", monospace;
		font-size: 0.875rem;
		text-align: center;
		padding: 2rem;
	}
</style>

<style>
	#walln__search {
		--pagefind-ui-primary: theme("colors.quote");
		--pagefind-ui-text: theme("colors.text");
		--pagefind-ui-background: transparent;
		--pagefind-ui-border: theme("colors.quote");
		--pagefind-ui-border-width: 1px;
	}
</style>
